Game manager
        //private PickUps smPotion = new PickUps();
        //private PickUps lgPotion = new PickUps();
        //private PickUps trap = new PickUps();

		 ////------------------------------------- Small Potion random position on start
            //smPotion.X = GenerateRandomGameplayCanvasCoordinates(true, smPotion);
            //smPotion.Y = GenerateRandomGameplayCanvasCoordinates(false, smPotion);
            //smPotion.PhysicalForm = new string[]
            //{
            //    "┌┐",
            //    "└┘"
            //};
            //smPotion.Name = "Small Health Potion";
            //smPotion.Width = smPotion.PhysicalForm.Length;
            //smPotion.Height = smPotion.GetLength();

            ////------------------------------------- Big Potion random position on start
            //lgPotion.X = GenerateRandomGameplayCanvasCoordinates(true, smPotion);
            //lgPotion.Y = GenerateRandomGameplayCanvasCoordinates(false, smPotion);
            //lgPotion.Health = 10;
            //lgPotion.Name = "Large Health Potion";
            //lgPotion.Width = lgPotion.PhysicalForm.Length;
            //lgPotion.Height = lgPotion.GetLength();

            ////------------------------------------- Big Potion random position on start
            //trap.X = GenerateRandomGameplayCanvasCoordinates(true, trap);
            //trap.Y = GenerateRandomGameplayCanvasCoordinates(false, trap);
            //trap.PhysicalForm = new string[]
            //{
            //    "▓▓"
            //};
            //trap.Health = -20;
            //trap.Name = "Trap";
            //trap.Color = ConsoleColor.Magenta;
            //trap.Width = trap.PhysicalForm.Length;
            //trap.Height = trap.GetLength();

			            //------------------------------------------------ Health potions
            //displayManager.DrawObjectAt(smPotion.X, smPotion.Y, smPotion.PhysicalForm, smPotion.Color);
            //displayManager.DrawObjectAt(lgPotion.X, lgPotion.Y, lgPotion.PhysicalForm, lgPotion.Color);

            //------------------------------------------------ Trap
            //displayManager.DrawObjectAt(trap.X, trap.Y, trap.PhysicalForm, trap.Color);


			//Collision check between player and small potion
            //if (CollisionCheck(player, smPotion, false, gameplayCanvasLimitRight + 1, gameplayCanvasLimitUp + 6))
            //{
            //    //Increase player current health
            //    displayManager.DrawHint(gameplayCanvasLimitLeft, gameplayCanvasLimitDown, "Small HP picked up!");
            //    player.CurrentHealth += smPotion.Health;

            //    //Clear and move the health potion somewhere else
            //    displayManager.DrawObjectAt(smPotion.X, smPotion.Y, smPotion.DeadForm, smPotion.Color);
            //    smPotion.X = GenerateRandomGameplayCanvasCoordinates(true, smPotion);
            //    smPotion.Y = GenerateRandomGameplayCanvasCoordinates(false, smPotion);
            //}

            //Collision check between player and large potion
            //if (CollisionCheck(player, lgPotion, false, gameplayCanvasLimitRight + 1, gameplayCanvasLimitUp + 12))
            //{
            //    //Increase player current health
            //    displayManager.DrawHint(gameplayCanvasLimitLeft, gameplayCanvasLimitDown, "Large HP picked up!");
            //    player.CurrentHealth += lgPotion.Health;

            //    //Clear and move the health potion somewhere else
            //    displayManager.DrawObjectAt(lgPotion.X, lgPotion.Y, lgPotion.DeadForm, lgPotion.Color);
            //    lgPotion.X = GenerateRandomGameplayCanvasCoordinates(true, lgPotion);
            //    lgPotion.Y = GenerateRandomGameplayCanvasCoordinates(false, lgPotion);
            //}

            //Collision check between player and trap
            //if (CollisionCheck(player, trap, false, gameplayCanvasLimitRight + 1, gameplayCanvasLimitUp + 18))
            //{
            //    //Decrease player current health
            //    displayManager.DrawHint(gameplayCanvasLimitLeft, gameplayCanvasLimitDown, "Trap sprung!");
            //    player.CurrentHealth += trap.Health;

            //    //Clear and move the health potion somewhere else
            //    displayManager.DrawObjectAt(trap.X, lgPotion.Y, trap.DeadForm, trap.Color);
            //    trap.X = GenerateRandomGameplayCanvasCoordinates(true, trap);
            //    trap.Y = GenerateRandomGameplayCanvasCoordinates(false, trap);
            //}


                            ////------------------------------------------------ Player out of bound check
                //if (player.X < gameplayCanvasLimitLeft + 1) player.X = gameplayCanvasLimitRight - player.Width - 1;
                //else if (player.X > gameplayCanvasLimitRight - player.Width - 1) player.X = gameplayCanvasLimitLeft + 1;
                //if (player.Y < gameplayCanvasLimitUp + 1) player.Y = gameplayCanvasLimitDown - player.Height - 1;
                //else if (player.Y > gameplayCanvasLimitDown - player.Height - 1) player.Y = gameplayCanvasLimitUp + 1;
                ////------------------------------------------------ End check











                public void GetScenarioLevelOne()
        {
            // ON START
            //Instantiate the map
            Map currentMap = new Map("Dungeon_01")
            {
                X = Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 1,
                Y = Constant.GAMEPLAY_CANVAS_LIMIT_UP + 1
            };

            //Gameplay canvas is drawn once to save the framerate
            Console.ForegroundColor = ConsoleColor.Yellow;
            displayManager.DrawRectangle(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT, Constant.GAMEPLAY_CANVAS_LIMIT_UP, Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - Constant.GAMEPLAY_CANVAS_LIMIT_LEFT, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - Constant.GAMEPLAY_CANVAS_LIMIT_UP);

            //Map is drawn once to save the framerate
            displayManager.DrawObjectAt(currentMap.X, currentMap.Y, currentMap.PhysicalForm, currentMap.Color);

            //Instantiate Player attributes
            player.CurrentHealth = 30;
            player.CurrentShield = 1;
            player.X = Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 6;
            player.Y = Constant.GAMEPLAY_CANVAS_LIMIT_UP + (Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - Constant.GAMEPLAY_CANVAS_LIMIT_UP) / 2 - 2;

            //Display level objective of this level
            gameUI.DrawConfirmationBox(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + (Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - Constant.GAMEPLAY_CANVAS_LIMIT_LEFT) / 2 - 26,
                                       Constant.GAMEPLAY_CANVAS_LIMIT_UP + (Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - Constant.GAMEPLAY_CANVAS_LIMIT_UP) / 2 - 2,
                                       52,
                                       4,
                                       "Kill Cyan Robot! He's broken and can't move.");


            //Instantiate Enemy attributes
            EnemyLimit = 1;

            //Spawn some Potions on start
            {
                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 0, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 23, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 2);
                displayManager.DrawObjectAt(potion[0].X, potion[0].Y, potion[0].PhysicalForm, potion[0].Color);

                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 1, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 42, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 2);
                displayManager.DrawObjectAt(potion[1].X, potion[1].Y, potion[1].PhysicalForm, potion[1].Color);

                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 2, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 59, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 2);
                displayManager.DrawObjectAt(potion[2].X, potion[2].Y, potion[2].PhysicalForm, potion[2].Color);
                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 3, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 78, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 2);
                displayManager.DrawObjectAt(potion[3].X, potion[3].Y, potion[3].PhysicalForm, potion[3].Color);

                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 4, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 23, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - 5);
                displayManager.DrawObjectAt(potion[4].X, potion[4].Y, potion[4].PhysicalForm, potion[4].Color);
                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 5, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 42, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - 5);
                displayManager.DrawObjectAt(potion[5].X, potion[5].Y, potion[5].PhysicalForm, potion[5].Color);

                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 6, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 59, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - 5);
                displayManager.DrawObjectAt(potion[6].X, potion[6].Y, potion[6].PhysicalForm, potion[6].Color);
                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 7, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 78, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - 5);
                displayManager.DrawObjectAt(potion[7].X, potion[7].Y, potion[7].PhysicalForm, potion[7].Color);
            }
            
            SpawnEnemyAtRuntime(Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - 10, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 9, EnemyType.Common_Robot, "Broken Robot");

            // ON UPDATE
            while (!gameOver || !gameWin)
            {
                //Draw Player at default position
                displayManager.DrawObjectAt(player.X, player.Y, player.PhysicalForm, player.Color);

                //Update player boundaries coordinates for the collision check
                player.GetCurrentBoundaryCoordinates();

                ////Spawn Enemy with limited instances
                //while (EnemyCount < EnemyLimit)
                //{
                //    if (EnemyCount > EnemyLimit)
                //    {
                //        EnemyCount = EnemyLimit;
                //    }
                //}

                //Perform collision check between player and alive enemy on the screen
                for (int i = 0; i < enemyList.Count; i++)
                {
                    if (!enemyList[i].IsDead)
                    {
                        //Update enemy visual position
                        displayManager.DrawObjectAt(enemyList[i].PreviousX, enemyList[i].PreviousY, enemyList[i].NegativeForm, enemyList[i].Color);
                        displayManager.DrawObjectAt(enemyList[i].X, enemyList[i].Y, enemyList[i].PhysicalForm, enemyList[i].Color);
                        enemyList[i].GetCurrentBoundaryCoordinates();

                        gameLogic.CollisionCheckInsideBounds(currentMap, enemyList[i]);
                        if (inputManager.keyPressed)
                        {
                            //Enemy movement
                            enemyList[i].MoveTowards(player);
                        }

                        //Enemy attack player when collides
                        gameLogic.CollisionCheckOutsideBounds(enemyList[i], player);

                        gameUI.ShowStatsHUD(50, 1, enemyList[i]);

                        //Combat
                        if (enemyList[i].AttackPermission)
                        {
                            player.TakeDamageFrom(enemyList[i], damageDistributionRatio);
                            enemyList[i].TakeDamageFrom(player, damageDistributionRatio);

                            
                        }
                    }
                    else if (enemyList[i].IsDead)
                    {
                        displayManager.DrawObjectAt(enemyList[i].X, enemyList[i].Y, enemyList[i].NegativeForm, enemyList[i].Color);
                        KillEnemyAtRunTime(enemyList[i]);

                        gameUI.DrawConfirmationBox(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + (Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - Constant.GAMEPLAY_CANVAS_LIMIT_LEFT) / 2 - 26,
                               Constant.GAMEPLAY_CANVAS_LIMIT_UP + (Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - Constant.GAMEPLAY_CANVAS_LIMIT_UP) / 2 - 2,
                               52,
                               4,
                               "Enemy has died");
                        Console.Clear();

                        //    //EnemyCount--;
                        //    //Release controls lock
                        //    gameWin = true;
                        //    player.BlockedHorizontally = BlockedDirection.None;
                        //    player.BlockedVertically = BlockedDirection.None;
                    }

                }

                //Map had been drawn when the gameplay started
                gameLogic.CollisionCheckInsideBounds(currentMap, player);

                gameLogic.CollisionCheckBetweenPlayerAndCanvasBoundaries(player);
                //Draw gameplay screens
                //------------------------------------------------ HUD
                Console.ForegroundColor = ConsoleColor.White;

                gameUI.ShowStatsHUD(1, 1, player);
                if (enemyList.Count == 0)
                {
                    gameUI.ShowStatsHUD(50, 1, enemy_null);
                }
                
                ////------------------------------------------------ Health Potion
                //displayManager.DrawObjectAt(potion.X, potion.Y, potion.PhysicalForm, potion.Color);

                //Collision check between player and potion
                for (int i = 0; i < potions.Count; i++)
                {
                    if (gameLogic.CollisionCheckTwoObjects(player, potion[i], false, Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT + 1, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 6))
                    {
                        //Increase player current health
                        DisplayManager.WriteTextAt(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN, $"{potion[i].Name} picked up!");
                        player.CurrentHealth += potion[i].Health;

                        //Clear and move the health potion outside the gameplay canvas
                        displayManager.DrawObjectAt(potion[i].X, potion[i].Y, potion[i].NegativeForm, potion[i].Color);
                        potion[i].X = 0;
                        potion[i].Y = 0;
                        //potion.X = gameLogic.GenerateRandomGameplayCanvasCoordinates(true, potion);
                        //potion.Y = gameLogic.GenerateRandomGameplayCanvasCoordinates(false, potion);
                    }
                }
                

                //Run player controller
                PlayerController();

                //Removed to avoid screen flickering
                //Console.Clear();

                if (player.CurrentLive < 0) gameOver = true;

                player.UpdateGameplayStatus(3);

                Tick++;
                //Console.SetCursorPosition(0, 0);
                //Console.WriteLine(Tick);
            }

            if (gameWin)
            {
                //Display level objective of this level
                gameUI.DrawConfirmationBox(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + (Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - Constant.GAMEPLAY_CANVAS_LIMIT_LEFT) / 2 - 26,
                                           Constant.GAMEPLAY_CANVAS_LIMIT_UP + (Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - Constant.GAMEPLAY_CANVAS_LIMIT_UP) / 2 - 2,
                                           52,
                                           4,
                                           "Kill Cyan Robot! He's broken and can't move.");
            }
        }





        
        public void RunLevelOne()
        {
            // ON START
            //Instantiate the map
            Map currentMap = new Map("Dungeon_01")
            {
                X = Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 1,
                Y = Constant.GAMEPLAY_CANVAS_LIMIT_UP + 1
            };
            currentMap.Color = ConsoleColor.White;

            //Gameplay canvas is drawn once to save the framerate
            Console.ForegroundColor = ConsoleColor.Yellow;
            displayManager.DrawRectangle(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT, Constant.GAMEPLAY_CANVAS_LIMIT_UP, Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - Constant.GAMEPLAY_CANVAS_LIMIT_LEFT, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - Constant.GAMEPLAY_CANVAS_LIMIT_UP);

            //Map is drawn once to save the framerate
            displayManager.DrawObjectAt(currentMap.X, currentMap.Y, currentMap.PhysicalForm, currentMap.Color);

            //Instantiate Player attributes
            player.CurrentHealth = 30;
            player.CurrentShield = 1;
            player.X = Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 6;
            player.Y = Constant.GAMEPLAY_CANVAS_LIMIT_UP + (Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - Constant.GAMEPLAY_CANVAS_LIMIT_UP) / 2 - 2;

            //Display level objective of this level
            gameUI.DrawConfirmationBox(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + (Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - Constant.GAMEPLAY_CANVAS_LIMIT_LEFT) / 2 - 26,
                                       Constant.GAMEPLAY_CANVAS_LIMIT_UP + (Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - Constant.GAMEPLAY_CANVAS_LIMIT_UP) / 2 - 2,
                                       40,
                                       4,
                                       "Kill the enemy! This one can't move.");

            //Instantiate Enemy attributes
            EnemyLimit = 1;

            //Spawn some Potions on start
            {
                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 0, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 23, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 2);
                displayManager.DrawObjectAt(potion[0].X, potion[0].Y, potion[0].PhysicalForm, potion[0].Color);
                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 1, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 42, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 2);
                displayManager.DrawObjectAt(potion[1].X, potion[1].Y, potion[1].PhysicalForm, potion[1].Color);

                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 2, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 59, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 2);
                displayManager.DrawObjectAt(potion[2].X, potion[2].Y, potion[2].PhysicalForm, potion[2].Color);
                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 3, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 78, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 2);
                displayManager.DrawObjectAt(potion[3].X, potion[3].Y, potion[3].PhysicalForm, potion[3].Color);

                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 4, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 23, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - 5);
                displayManager.DrawObjectAt(potion[4].X, potion[4].Y, potion[4].PhysicalForm, potion[4].Color);
                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 5, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 42, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - 5);
                displayManager.DrawObjectAt(potion[5].X, potion[5].Y, potion[5].PhysicalForm, potion[5].Color);

                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 6, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 59, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - 5);
                displayManager.DrawObjectAt(potion[6].X, potion[6].Y, potion[6].PhysicalForm, potion[6].Color);
                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 7, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 78, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - 5);
                displayManager.DrawObjectAt(potion[7].X, potion[7].Y, potion[7].PhysicalForm, potion[7].Color);

                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 8, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 23, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 10);
                displayManager.DrawObjectAt(potion[8].X, potion[8].Y, potion[8].PhysicalForm, potion[8].Color);
            }
            
            SpawnEnemyAtRuntime(Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - 10, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 9, EnemyType.Common_Robot, "[   Immobile Robot   ]");

            // ON UPDATE
            while (!gameOver || !gameWin)
            {
                //Draw Player at default position
                displayManager.DrawObjectAt(player.X, player.Y, player.PhysicalForm, player.Color);

                //Update player boundaries coordinates for the collision check
                player.GetCurrentBoundaryCoordinates();

                //Perform collision check between player and alive enemy on the screen
                for (int i = 0; i < enemyList.Count; i++)
                {
                    if (!enemyList[i].IsDead)
                    {
                        //Update enemy visual position
                        displayManager.DrawObjectAt(enemyList[i].PreviousX, enemyList[i].PreviousY, enemyList[i].NegativeForm, enemyList[i].Color);
                        displayManager.DrawObjectAt(enemyList[i].X, enemyList[i].Y, enemyList[i].PhysicalForm, enemyList[i].Color);
                        enemyList[i].GetCurrentBoundaryCoordinates();

                        gameLogic.CollisionCheckInsideBounds(currentMap, enemyList[i]);
                        if (inputManager.keyPressed)
                        {
                            //Enemy movement
                            //enemyList[i].MoveTowards(player);
                        }

                        //Enemy attack player when collides
                        gameLogic.CollisionCheckOutsideBounds(enemyList[i], player);

                        gameUI.ShowStatsHUD(50, 1, enemyList[i]);

                        //Combat
                        if (enemyList[i].AttackPermission)
                        {
                            player.TakeDamageFrom(enemyList[i], damageDistributionRatio);
                            enemyList[i].TakeDamageFrom(player, damageDistributionRatio);
                        }

                    }
                    else if (enemyList[i].IsDead)
                    {
                        gameUI.ShowStatsHUD(50, 1, enemyList[i]);
                        displayManager.DrawObjectAt(enemyList[i].X, enemyList[i].Y, enemyList[i].NegativeForm, enemyList[i].Color);
                        RemoveEnemyInstance(enemyList[i]);

                        gameUI.DrawConfirmationBox(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + (Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - Constant.GAMEPLAY_CANVAS_LIMIT_LEFT) / 2 - 26,
                               Constant.GAMEPLAY_CANVAS_LIMIT_UP + (Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - Constant.GAMEPLAY_CANVAS_LIMIT_UP) / 2 - 2,
                               26,
                               4,
                               "Enemy has been killed.");

                        EnemyCount--;
                        if (EnemyCount == 0)
                        {
                            gameWin = true;
                        }

                        //Release controls lock
                        player.BlockedHorizontally = BlockedDirection.None;
                        player.BlockedVertically = BlockedDirection.None;
                    }
                }

                if (gameWin)
                {
                    gameUI.DrawTransitionEffect_Dissolve('█', ' ');
                    ClearPreviousLevelData();
                    break;
                }

                //Collision check
                gameLogic.CollisionCheckInsideBounds(currentMap, player);
                gameLogic.CollisionCheckBetweenPlayerAndCanvasBoundaries(player);

                //Draw gameplay screens
                //------------------------------------------------ HUD
                Console.ForegroundColor = ConsoleColor.White;

                gameUI.ShowStatsHUD(1, 1, player);
                if (enemyList.Count == 0)
                {
                    gameUI.ShowStatsHUD(50, 1, enemy_null);
                }

                //Collision check between player and potions
                for (int i = 0; i < pickups.Count; i++)
                {
                    if (gameLogic.CollisionCheckTwoObjects(player, potion[i], false, Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT + 1, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 6))
                    {
                        //Increase player current health
                        DisplayManager.WriteTextAt(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN, $"{potion[i].Name} picked up!");
                        player.GetHealthFrom(potion[i]);

                        //Clear and remove the health potion outside the gameplay canvas
                        displayManager.DrawObjectAt(potion[i].X, potion[i].Y, potion[i].NegativeForm, potion[i].Color);
                        potion[i].X = 0;
                        potion[i].Y = 0;
                    }
                }

                //Run player controller
                PlayerController();

                if (player.CurrentLive < 0) gameOver = true;

                player.UpdateGameplayStatus(3);

                Tick++;
                //Console.SetCursorPosition(0, 0);
                //Console.WriteLine(Tick);
            }

            //Console.Clear();
            if (gameWin)
            {
                
                
                //Display level objective of this level
                gameUI.DrawConfirmationBox(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + (Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - Constant.GAMEPLAY_CANVAS_LIMIT_LEFT) / 2 - 26,
                                           Constant.GAMEPLAY_CANVAS_LIMIT_UP + (Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - Constant.GAMEPLAY_CANVAS_LIMIT_UP) / 2 - 2,
                                           44,
                                           4,
                                           "No enemy left. Proceed to the next level");
            }
        }

        public void RunLeveTwo()
        {
            // ON START
            gameOver = false;
            gameWin = false;
            //Instantiate new map
            Map currentMap = new Map("Dungeon_05")
            {
                X = Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 1,
                Y = Constant.GAMEPLAY_CANVAS_LIMIT_UP + 1
            };

            currentMap.Color = ConsoleColor.DarkMagenta;

            //Gameplay canvas is drawn once to save the framerate
            Console.ForegroundColor = ConsoleColor.Yellow;
            displayManager.DrawRectangle(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT, Constant.GAMEPLAY_CANVAS_LIMIT_UP, Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - Constant.GAMEPLAY_CANVAS_LIMIT_LEFT, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - Constant.GAMEPLAY_CANVAS_LIMIT_UP);

            //Draw map
            displayManager.DrawObjectAt(currentMap.X, currentMap.Y, currentMap.PhysicalForm, currentMap.Color);

            //Player stats bring over from previous level
            player.X = Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 4;
            player.Y = Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - 7;

            //Display level objective of this level
            gameUI.DrawConfirmationBox(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + (Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - Constant.GAMEPLAY_CANVAS_LIMIT_LEFT) / 2 - 26,
                                       Constant.GAMEPLAY_CANVAS_LIMIT_UP + (Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - Constant.GAMEPLAY_CANVAS_LIMIT_UP) / 2 - 2,
                                       52,
                                       4,
                                       "Kill the enemy. This one is fast and aggressive.");

            //Draw map
            displayManager.DrawObjectAt(currentMap.X, currentMap.Y, currentMap.PhysicalForm, currentMap.Color);

            //Instantiate Enemy attributes
            EnemyLimit = 1;

            //Modify some Potions on start
            {
                //respawn the new potions
                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 0, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 23, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 2);
                displayManager.DrawObjectAt(potion[0].X, potion[0].Y, potion[0].PhysicalForm, potion[0].Color);
                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 1, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 42, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 2);
                displayManager.DrawObjectAt(potion[1].X, potion[1].Y, potion[1].PhysicalForm, potion[1].Color);

                SpawnShieldElixirAtRunTime(Item.Shield_Elixir_Lg, 2, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 24, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 11);
                displayManager.DrawObjectAt(elixir[2].X, elixir[2].Y, elixir[2].PhysicalForm, elixir[2].Color);
                SpawnShieldElixirAtRunTime(Item.Shield_Elixir_Lg, 3, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 40, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 11);
                displayManager.DrawObjectAt(elixir[3].X, elixir[3].Y, elixir[3].PhysicalForm, elixir[3].Color);
            }

            SpawnEnemyAtRuntime(Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - 10, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 3, EnemyType.Elite_Robot, "[     Elite Robot    ]");

            // ON UPDATE
            while (!gameOver || !gameWin)
            {
                //Draw Player at default position
                displayManager.DrawObjectAt(player.X, player.Y, player.PhysicalForm, player.Color);

                //Update player boundaries coordinates for the collision check
                player.GetCurrentBoundaryCoordinates();

                //Perform collision check between player and alive enemy on the screen
                for (int i = 0; i < enemyList.Count; i++)
                {
                    if (!enemyList[i].IsDead)
                    {
                        //Update enemy visual position
                        displayManager.DrawObjectAt(enemyList[i].PreviousX, enemyList[i].PreviousY, enemyList[i].NegativeForm, enemyList[i].Color);
                        displayManager.DrawObjectAt(enemyList[i].X, enemyList[i].Y, enemyList[i].PhysicalForm, enemyList[i].Color);
                        enemyList[i].GetCurrentBoundaryCoordinates();

                        gameLogic.CollisionCheckInsideBounds(currentMap, enemyList[i]);
                        if (inputManager.keyPressed)
                        {
                            //Enemy movement
                            enemyList[i].MoveTowards(player);
                        }

                        //Enemy attack player when collides
                        gameLogic.CollisionCheckOutsideBounds(enemyList[i], player);

                        gameUI.ShowStatsHUD(50, 1, enemyList[i]);

                        //Combat
                        if (enemyList[i].AttackPermission)
                        {
                            player.TakeDamageFrom(enemyList[i], damageDistributionRatio);
                            enemyList[i].TakeDamageFrom(player, damageDistributionRatio);
                        }

                    }
                    else if (enemyList[i].IsDead)
                    {
                        gameUI.ShowStatsHUD(50, 1, enemyList[i]);
                        displayManager.DrawObjectAt(enemyList[i].X, enemyList[i].Y, enemyList[i].NegativeForm, enemyList[i].Color);
                        RemoveEnemyInstance(enemyList[i]);

                        gameUI.DrawConfirmationBox(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + (Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - Constant.GAMEPLAY_CANVAS_LIMIT_LEFT) / 2 - 26,
                               Constant.GAMEPLAY_CANVAS_LIMIT_UP + (Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - Constant.GAMEPLAY_CANVAS_LIMIT_UP) / 2 - 2,
                               26,
                               4,
                               "Enemy has been killed.");

                        EnemyCount--;
                        if (EnemyCount == 0)
                        {
                            gameWin = true;
                        }

                        //Release controls lock
                        player.BlockedHorizontally = BlockedDirection.None;
                        player.BlockedVertically = BlockedDirection.None;
                    }
                }

                if (gameWin)
                {
                    gameUI.DrawTransitionEffect_Dissolve('█', ' ');
                    ClearPreviousLevelData();

                    break;
                }

                if (gameOver)
                {
                    gameUI.DrawTransitionEffect_Dissolve('█', ' ');
                    ClearPreviousLevelData();
                    break;
                }

                //Collision check
                gameLogic.CollisionCheckInsideBounds(currentMap, player);
                gameLogic.CollisionCheckBetweenPlayerAndCanvasBoundaries(player);

                //Draw gameplay screens
                //------------------------------------------------ HUD
                Console.ForegroundColor = ConsoleColor.White;

                gameUI.ShowStatsHUD(1, 1, player);
                if (enemyList.Count == 0)
                {
                    gameUI.ShowStatsHUD(50, 1, enemy_null);
                }

                //Collision check between player and potions
                for (int i = 0; i < pickups.Count; i++)
                {
                    if (potion[i] != null && gameLogic.CollisionCheckTwoObjects(player, potion[i], false, Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT + 1, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 6))
                    {
                        //Increase player current health
                        DisplayManager.WriteTextAt(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN, $"{potion[i].Name} picked up!");
                        player.GetHealthFrom(potion[i]);

                        //Clear and move the health potion outside the gameplay canvas
                        displayManager.DrawObjectAt(potion[i].X, potion[i].Y, potion[i].NegativeForm, potion[i].Color);
                        potion[i].X = 0;
                        potion[i].Y = 0;
                    }
                }

                //Collision check between player and elixirs
                for (int i = 0; i < pickups.Count; i++)
                {
                    if (elixir[i] != null && gameLogic.CollisionCheckTwoObjects(player, elixir[i], false, Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT + 1, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 6))
                    {
                        //Increase player current health
                        DisplayManager.WriteTextAt(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN, $"{elixir[i].Name} picked up!");
                        player.GetShieldFrom(elixir[i]);

                        //Clear and move the health potion outside the gameplay canvas
                        displayManager.DrawObjectAt(elixir[i].X, elixir[i].Y, elixir[i].NegativeForm, elixir[i].Color);
                        elixir[i].X = 0;
                        elixir[i].Y = 0;
                    }
                }

                //Run player controller
                PlayerController();

                if (player.CurrentLive < 0) gameOver = true;

                player.UpdateGameplayStatus(3);

                Tick++;
            }

            Console.Clear();
            if (gameWin)
            {
                gameUI.DrawTransitionEffect_Dissolve('█', ' ');
                //Display level objective of this level
                gameUI.DrawConfirmationBox(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + (Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - Constant.GAMEPLAY_CANVAS_LIMIT_LEFT) / 2 - 26,
                                           Constant.GAMEPLAY_CANVAS_LIMIT_UP + (Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - Constant.GAMEPLAY_CANVAS_LIMIT_UP) / 2 - 2,
                                           40,
                                           4,
                                           "Good work! Proceed to the next level");
            }
        }

        public void RunLevelThree()
        {
            // ON START
            gameOver = false;
            gameWin = false;
            //Instantiate new map
            Map currentMap = new Map("Dungeon_03")
            {
                X = Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 1,
                Y = Constant.GAMEPLAY_CANVAS_LIMIT_UP + 1
            };

            currentMap.Color = ConsoleColor.DarkRed;

            //Gameplay canvas is drawn once to save the framerate
            Console.ForegroundColor = ConsoleColor.Yellow;
            displayManager.DrawRectangle(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT, Constant.GAMEPLAY_CANVAS_LIMIT_UP, Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - Constant.GAMEPLAY_CANVAS_LIMIT_LEFT, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - Constant.GAMEPLAY_CANVAS_LIMIT_UP);

            //Draw map
            displayManager.DrawObjectAt(currentMap.X, currentMap.Y, currentMap.PhysicalForm, currentMap.Color);

            //Player stats bring over from previous level
            player.X = Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 4;
            player.Y = Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - 7;

            //Display level objective of this level
            gameUI.DrawConfirmationBox(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + (Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - Constant.GAMEPLAY_CANVAS_LIMIT_LEFT) / 2 - 26,
                                       Constant.GAMEPLAY_CANVAS_LIMIT_UP + (Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - Constant.GAMEPLAY_CANVAS_LIMIT_UP) / 2 - 2,
                                       40,
                                       4,
                                       "Kill the boss. He is slow but strong");

            //Draw map
            displayManager.DrawObjectAt(currentMap.X, currentMap.Y, currentMap.PhysicalForm, currentMap.Color);

            //Instantiate Enemy attributes
            EnemyLimit = 1;

            //Modify some Potions on start
            {
                ////respawn the new pickup items
                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 0, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 23, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 2);
                displayManager.DrawObjectAt(potion[0].X, potion[0].Y, potion[0].PhysicalForm, potion[0].Color);
                SpawnHealthPotionAtRunTime(Item.Health_Potion_Lg, 1, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 42, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 2);
                displayManager.DrawObjectAt(potion[1].X, potion[1].Y, potion[1].PhysicalForm, potion[1].Color);

                SpawnShieldElixirAtRunTime(Item.Shield_Elixir_Lg, 2, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 24, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 11);
                displayManager.DrawObjectAt(elixir[2].X, elixir[2].Y, elixir[2].PhysicalForm, elixir[2].Color);
                SpawnShieldElixirAtRunTime(Item.Shield_Elixir_Lg, 3, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 40, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 11);
                displayManager.DrawObjectAt(elixir[3].X, elixir[3].Y, elixir[3].PhysicalForm, elixir[3].Color);

                SpawnDamageUpRuneAtRunTime(Item.DamageUp_Rune_Lg, 0, Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + 40, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 11);
                displayManager.DrawObjectAt(rune[0].X, rune[0].Y, rune[0].PhysicalForm, rune[0].Color);
            }

            SpawnEnemyAtRuntime(Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - 20, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 10, EnemyType.Giant_Robot, "[     Big Fat Bot    ]");

            // ON UPDATE
            while (!gameOver || !gameWin)
            {
                //Draw Player at default position
                displayManager.DrawObjectAt(player.X, player.Y, player.PhysicalForm, player.Color);

                //Update player boundaries coordinates for the collision check
                player.GetCurrentBoundaryCoordinates();

                //Perform collision check between player and alive enemy on the screen
                for (int i = 0; i < enemyList.Count; i++)
                {
                    if (!enemyList[i].IsDead)
                    {
                        //Update enemy visual position
                        displayManager.DrawObjectAt(enemyList[i].PreviousX, enemyList[i].PreviousY, enemyList[i].NegativeForm, enemyList[i].Color);
                        displayManager.DrawObjectAt(enemyList[i].X, enemyList[i].Y, enemyList[i].PhysicalForm, enemyList[i].Color);
                        enemyList[i].GetCurrentBoundaryCoordinates();

                        gameLogic.CollisionCheckInsideBounds(currentMap, enemyList[i]);
                        if (inputManager.keyPressed)
                        {
                            //Enemy movement
                            enemyList[i].MoveTowards(player);
                        }

                        //Enemy attack player when collides
                        gameLogic.CollisionCheckOutsideBounds(enemyList[i], player);

                        gameUI.ShowStatsHUD(50, 1, enemyList[i]);

                        //Combat
                        if (enemyList[i].AttackPermission)
                        {
                            player.TakeDamageFrom(enemyList[i], damageDistributionRatio);
                            enemyList[i].TakeDamageFrom(player, damageDistributionRatio);
                        }
                    }
                    else if (enemyList[i].IsDead)
                    {
                        gameUI.ShowStatsHUD(50, 1, enemyList[i]);
                        displayManager.DrawObjectAt(enemyList[i].X, enemyList[i].Y, enemyList[i].NegativeForm, enemyList[i].Color);
                        RemoveEnemyInstance(enemyList[i]);

                        gameUI.DrawConfirmationBox(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + (Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - Constant.GAMEPLAY_CANVAS_LIMIT_LEFT) / 2 - 26,
                               Constant.GAMEPLAY_CANVAS_LIMIT_UP + (Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - Constant.GAMEPLAY_CANVAS_LIMIT_UP) / 2 - 2,
                               26,
                               4,
                               "Big Fat Bot defeated!");

                        EnemyCount--;
                        if (EnemyCount == 0)
                        {
                            gameWin = true;
                        }

                        //Release controls lock
                        player.BlockedHorizontally = BlockedDirection.None;
                        player.BlockedVertically = BlockedDirection.None;
                    }
                }

                if (gameWin)
                {
                    gameUI.DrawTransitionEffect_Dissolve('█', ' ');
                    ClearPreviousLevelData();

                    break;
                }

                if (gameOver)
                {
                    gameUI.DrawTransitionEffect_Dissolve('█', ' ');
                    ClearPreviousLevelData();
                    break;
                }

                //Collision check
                gameLogic.CollisionCheckInsideBounds(currentMap, player);
                gameLogic.CollisionCheckBetweenPlayerAndCanvasBoundaries(player);

                //Draw gameplay screens
                //------------------------------------------------ HUD
                Console.ForegroundColor = ConsoleColor.White;

                gameUI.ShowStatsHUD(1, 1, player);
                if (enemyList.Count == 0)
                {
                    gameUI.ShowStatsHUD(50, 1, enemy_null);
                }

                //Collision check between player and potions
                for (int i = 0; i < pickups.Count; i++)
                {
                    if (potion[i] != null && gameLogic.CollisionCheckTwoObjects(player, potion[i], false, Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT + 1, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 6))
                    {
                        //Increase player current health
                        DisplayManager.WriteTextAt(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN, $"{potion[i].Name} picked up!");
                        player.GetHealthFrom(potion[i]);

                        //Clear and move the health potion outside the gameplay canvas
                        displayManager.DrawObjectAt(potion[i].X, potion[i].Y, potion[i].NegativeForm, potion[i].Color);
                        potion[i].X = 0;
                        potion[i].Y = 0;
                    }
                }

                //Collision check between player and elixirs
                for (int i = 0; i < pickups.Count; i++)
                {
                    if (elixir[i] != null && gameLogic.CollisionCheckTwoObjects(player, elixir[i], false, Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT + 1, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 6))
                    {
                        //Increase player current health
                        DisplayManager.WriteTextAt(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN, $"{elixir[i].Name} picked up!");
                        player.GetShieldFrom(elixir[i]);

                        //Clear and move the health potion outside the gameplay canvas
                        displayManager.DrawObjectAt(elixir[i].X, elixir[i].Y, elixir[i].NegativeForm, elixir[i].Color);
                        elixir[i].X = 0;
                        elixir[i].Y = 0;
                    }
                }

                //Collision check between player and runes
                for (int i = 0; i < pickups.Count; i++)
                {
                    if (rune[i] != null && gameLogic.CollisionCheckTwoObjects(player, rune[i], false, Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT + 1, Constant.GAMEPLAY_CANVAS_LIMIT_UP + 6))
                    {
                        //Increase player current health
                        DisplayManager.WriteTextAt(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT, Constant.GAMEPLAY_CANVAS_LIMIT_DOWN, $"{rune[i].Name} picked up!");
                        player.GetDamageFrom(rune[i]);

                        //Clear and move the health potion outside the gameplay canvas
                        displayManager.DrawObjectAt(rune[i].X, rune[i].Y, rune[i].NegativeForm, rune[i].Color);
                        rune[i].X = 0;
                        rune[i].Y = 0;
                    }
                }

                //Run player controller
                PlayerController();

                if (player.CurrentLive < 0) gameOver = true;

                player.UpdateGameplayStatus(3);

                Tick++;
            }

            Console.Clear();
            if (gameWin)
            {
                gameUI.DrawTransitionEffect_Dissolve('█', ' ');
                //Display level objective of this level
                gameUI.DrawConfirmationBox(Constant.GAMEPLAY_CANVAS_LIMIT_LEFT + (Constant.GAMEPLAY_CANVAS_LIMIT_RIGHT - Constant.GAMEPLAY_CANVAS_LIMIT_LEFT) / 2 - 26,
                                           Constant.GAMEPLAY_CANVAS_LIMIT_UP + (Constant.GAMEPLAY_CANVAS_LIMIT_DOWN - Constant.GAMEPLAY_CANVAS_LIMIT_UP) / 2 - 2,
                                           48,
                                           4,
                                           "Congratulations! You have finished the game");
                gameState = GameState.Main_Menu;
            }
        }
